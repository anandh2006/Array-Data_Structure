1. Creating an Array using list and array Module
➤ Using Python list (most common)

# Creating a list (dynamic array)
arr = [10, 20, 30, 40]
print(arr)

➤ Using array module (type-restricted, more efficient)

import array

# 'i' is typecode for integer
arr = array.array('i', [10, 20, 30, 40])
print(arr)

Type Code	Data Type
'i'	  Signed int
'f'	  Float
'd'	  Double

2. Traversing an Array
➤ Using for loop

arr = [10, 20, 30, 40]
for i in arr:
    print(i, end=' ')

Using for loop with index

for i in range(len(arr)):
    print(f"Index {i}: {arr[i]}")

Using enumurate function

import array
arr = array.array('i', [10, 20, 30])

# Using enumerate to print index and value
for i, value in enumerate(arr):
    print(f"Index {i}: {value}")

3. Insertion in an Array
➤ At Beginning

arr = [10, 20, 30]
arr.insert(0, 5)  
print(arr)  # [5, 10, 20, 30]

➤ At Middle

arr.insert(2, 15)  
print(arr)  # [5, 10, 15, 20, 30]


➤ At Last

arr.append(35)
print(arr)  # [5, 10, 15, 20, 30, 35]

✅ 4. Deletion in an Array
➤ By Index

arr = [5, 10, 15, 20, 25]
arr.pop(2)  # Remove element at index 2
print(arr)  # [5, 10, 20, 25]

➤ By Value

arr.remove(10)  # Removes the first occurrence of value 10
print(arr)  # [5, 20, 25]

Linear Search:

arr = [10,20,30,40,50,60]
tar = 40
for i in range(len(arr)):
    if arr[i] == tar:
        print(f"Element found at index{i}")
if tar not in arr:
    print("Element not in the array")

        (or)

arr = [5, 10, 15, 20, 25]
target = 20
found = False

for i in range(len(arr)):
    if arr[i] == target:
        print(f"Found at index {i}")
        found = True
        break

if not found:
    print("Not found")

Binary Search:

def binary_search(arr, target):
    left, right = 0, len(arr) - 1
    
    while left <= right:
        mid = (left + right) // 2
        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    return -1

arr = [10, 20, 30, 40, 50]
target = 20
index = binary_search(arr, target)

if index != -1:
    print(f"Found at index {index}")
else:
    print("Not found")

6. Updating an Element

arr = [10, 20, 30, 40]
arr[2] = 99  # Change value at index 2
print(arr)  # [10, 20, 99, 40]

🔍 Summary Table
Operation	        Function / Method	          Time Complexity
Traverse	        for i in arr	              O(n)
Insert at start	  insert(0, val)	            O(n)
Insert at end	    append(val)	                O(1) (amortized)
Delete by index	  pop(index)	                O(n)
Delete by value	   remove(val)	              O(n)
Search (linear)	  for loop	                  O(n)
Search (binary)	  custom binary_search()	    O(log n)
Update	          arr[i] = new_val	           O(1)
